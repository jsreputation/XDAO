 Test Report generated by automated testing.

        This is an automatic testing of the smart contract of the crypto token XDAO.
        A test script will be run with multiple predefined test cases.
        This is a black-box testing, and doesn't be concerned with the code logic,
        unlike white-box tests including verification of design and source code.
        While this testing can not provide a rigorous proof of the system,
        it covers the majority of use cases, when supplemented with code logic.
    √ The purpose was stated.
        XDAO smart contract is tested with a few selected test cases.
        The test cases were carefully selected to be independent yet typical.
        When combined, the test cases are multiplied / convoluted with each other,
        implicitly extending to a majority range of use cases.
    √ The scope was stated.
        There are three phases of testing: test-bed, initial contract, and upgrading contract.
        Test-bed phase will build testing peripherals for the remaining two phases.
        Initial phase will test the initial contract with a set of test cases.
        Upgraded phase will test the upgrading contract with the same set of test cases.
        Note: The initial contract is later upgraded by the upgrading contract, which
        inherits the state of initial contracts yet at the same address of deployment.
    √ The strategy was stated.

  ======= Phase 1. The test-bed for the whole testing is contstructed. =====

        A predefined set of test cases will be run on the initial contract.
    √ 

  1. Connect to Provider-Wallet-Network.

        theOwner's address = {0xf39F...}, balance = 10,000 FTM.
        Alice's address = {0x7099...}, balance = 10,000 FTM.
        Bob's address = {0x3C44...}, balance = 10,000 FTM.
        Charlie's address = {0x90F7...}, balance = 10,000 FTM.
    √ Test signers, defined in your hardhat.config.js, are ready. (1010ms)

  2. Check or build a main Dex environment for the contract of the XDAO token.

        A clone Hertz deployed to: {0x5FbD...}
    √ A clone of Hertz token contract was deployed and is ready for use. (179ms)
        !!! Source code signature = 
         2de75715eaadc263f93ae31df0472548254992f701bb9830d9ed08b3e5f4fa21
        !!! Please make sure the pairFor(...) function of PancakeRouter.sol file has the same code.
    √ A clone of PancakeFactory contract was deployed and is ready for use. (158ms)
    √ A a WETH token contract was deployed and is ready for use. (60ms)
        A clone PancakeRouter deployed to: {0xCf7E...}
    √ A clone of PancakeRouter was deployed with the PancakeFactory and WETH. (62ms)
    √ The PancakeFactory and PancakeRouter are checked matching.

  3. Deploy the initial upgradeable contract of XDAO token.

        Upgradeable initial contract of XDAO token deployed to:  {0x0165...}
    √ The initial contract of XDAO token was deployed. (373ms)
        Token name: XDAO Utility Token
        Token symbol: XO
        Total supply: 1,000,000,000,000,000

        theOwner is the current owner: {0xf39F...}
        Current owner's balance: 1,000,000,000,000,000 XO.
    √ The basic existence of the contract was checked for. (38ms)

        BurnFee: 31.4% of transfer amount is correctly set to be burnt.
        RewardsFee: 31.4% of transfer amount is correctly set to be converted to Hertz rewards.
        LiquidityFee: 1% of transfer amount is correctly set to be liquified paired with FTM.

        BurnFee Address: {0x8887...} is correctly set.
        RewardsFee Address: {0x0300...} is correctly set.
        LiquidityFee Address: {0x1093...} is correctly set.

        VoteBurnPulse: 0.07% of tokens used to vote is correctly set to be burnt.
        AllBurnPulse: 0.777% of all holdings is correctly set to be burnt.
        LiquidityPulse: 0.69% of LP is correctly set to be converted to Hertz rewards.

        maxTransferAmount 1,000,000,000,000 XO is correctly set.
        burnQuantum 100,000 XO is correctly set.
        rewardsQuantum 200,000 XO is correctly set.
        liquidityQuantum 300,000 XO is correctly set.

        Dex Router address {0xCf7E...} is correctly set.
        Liquidity Pool (XDAO, FTM) is found at its due address: {0x0ACa...}.
        Liquidity Pool (XDAO, HTZ) is found at its due address: {0x5CCF...}.

        autoManagement is currently set to:  true
    √ The parameters of the contract were checked. (82ms)

  ======= Phase 2. The initial contract is tested. =====

        A predefined set of test cases will be run on the initial contract.
    √ 

  4. Complete the test bed of the contract, with liquidity pools.

        The (XDAO, FTM) pool contract is located at: {0x0ACa...}
        The (XDAO, FTM) pool contract's off-chain handle was built and checked.
    √ The (XDAO, FTM) pool contract's off-chain handle was built.
        The (XDAO, FTM) pool, now, has neither reserves nor LP tokens.
        The pool should accept any ratio of tokens as the 1s liquidity.
        (199,999,999,999,999.97 XO, 1,999.994 FTM) added to the (XDAO, FTM) pool.
        It's 20% of the theOwner's initial balance.
    √ The (XDAO, FTM) pool was added with liquidity. (120ms)
        The (XDAO, HTZ) pool contract is located at: {0x5CCF...}
        The (XDAO, HTZ) pool contract's off-chain handle was built and checked.
    √ The (XDAO, HTZ) pool contract's off-chain handle was built.
        The (XDAO, HTZ) pool, now, has neither reserves nor LP tokens.
        The pool should accept any ratio of tokens as the 1s liquidity.
        (160,000,000,000,000 XO, 199,999,999,999,999.97 HTZ) added to the (XDAO, HTZ) pool.
        It's 20% of the theOwner's initial balance.
    √ The (XDAO, HTZ) pool was added with liquidity. (131ms)

  5. Check administrative functions for parameter control.

        SetFees function works, changing fee rates correctly, called by the owner.
        SetFees function does NOT work, when called by a non-owner user.

        SetStoreAddresses function works when called by the owner.
        SetStoreAddresses function does NOT work when called by a non-owner user.

        SetPulses function works correctly, when called by the owner.
        SetPulse function does NOT work, when called by a non-owner user.

        SetMaxTransferAmount function works correctly, when called by the owner.
        SetMaxTransferAmount function does NOT work, when called by a non-owner user.

        SetQauntums function works correctly, when called by the owner.
        SetQuantums function does NOT work, when called by a non-owner user.
    √ The administrative functions for parameter control were checked. (370ms)

        BurnFee: 31.4% of transfer amount is correctly set to be burnt.
        RewardsFee: 31.4% of transfer amount is correctly set to be converted to Hertz rewards.
        LiquidityFee: 1% of transfer amount is correctly set to be liquified paired with FTM.

        BurnFee Address: {0x8887...} is correctly set.
        RewardsFee Address: {0x0300...} is correctly set.
        LiquidityFee Address: {0x1093...} is correctly set.

        VoteBurnPulse: 0.07% of tokens used to vote is correctly set to be burnt.
        AllBurnPulse: 0.777% of all holdings is correctly set to be burnt.
        LiquidityPulse: 0.69% of LP is correctly set to be converted to Hertz rewards.

        maxTransferAmount 1,000,000,000,000 XO is correctly set.
        burnQuantum 100,000 XO is correctly set.
        rewardsQuantum 200,000 XO is correctly set.
        liquidityQuantum 300,000 XO is correctly set.

        Dex Router address {0xCf7E...} is correctly set.
        Liquidity Pool (XDAO, FTM) is found at its due address: {0x0ACa...}.
        Liquidity Pool (XDAO, HTZ) is found at its due address: {0x5CCF...}.

        autoManagement is currently set to:  true
    √ The parameters were correctlyl reverted back to their initial values. (76ms)

  6. Check owner-to-user transfers and fees collection.

        Assumption: the state variable 'totalSupply' is always the real total supply.
    √ Test design was described.
        The maximum amount that will NOT trigger the MaxTransferAmount 
        and quantized fee management, is 100,000 XO
        Only fee collections should triggered, if the owner transfers this amount to a user.
        Alice is not the current owner.
        theOwner transferred 100,000 XO to Alice.
        The total supply is preserved to be: 1,000,000,000,000,000 XO
        The sender's balance was reduced by the transfer amount: 100,000 XO.
        Owner-Any transfer is free of fees,
        hence the fee rates: { burn: 0, rewards: 0, liquidity: 0 }
        Burn fee is paid correctly. Burn fee collection was increased by: 0 XO.
        Rewards fee is paid correctly. Rewards fee collection was increased by: 0 XO.
        Liquidity fee is paid correctly. Liquidity fee collection was increased by: 0 XO.
        The amount sent - the amount received = total fees: 0
        Cash flow on owner-to-user transfer is correct and precise.
    √ An owner-to-user transfer is called. (82ms)

  7. Check user-to-user transfers and fees collection.

        Assumption: the state variable 'totalSupply' is always the real total supply.
    √ Test design was described.
        The maximum amount that will NOT trigger the MaxTransferAmount 
        and quantized fee management is 100,000 XO
        Only fee collection should triggered, if a user transfers this amount to another user.
        Testing with the siginer Alice, who is not the current owner.
        Bot is not the current owner, either.
        Alice, a non-owner, transferred 100,000 XO to Bob.
        The total supply is preserved to be: 1,000,000,000,000,000 XO
        The sender's balance was reduced by the transfer amount: 100,000 XO.
        Burn fee is paid correctly. Burn fee collection was increased by: 31,400 XO.
        Rewards fee is paid correctly. Rewards fee collection was increased by: 1,000 XO.
        Liquidity fee is paid correctly. Liquidity fee collection was increased by: 1,000 XO.
        The amount sent - the amount received = total fees: 33,400
        Cash flow on owner-to-user transfer is correct and precise.
    √ An user-to-user transfer was called and the fees were correctly collected. (108ms)

  8. Check quantized management of fees.

        Tokens collected in the 'storeAddresses.rewards' should be spent
        on a quantum basis (to buy Hertz for Rewards),
        to avoid frequent small transfers and to save gas fees.
        You can't spend 23000 gas to buy 5 weies of Hertz.
    √ Test design was described.
        The minimum amount that WILL trigger 
        all the quantized management sub-functions, is 1,000,000,000,001 XO.
        All quantized management sub-functions should triggered, 
        if a user transfers this amount to another user.
        Alice's balance was supplemented to be 1,000,000,000,001 XO, 
        to trigger the quantized fees management.
        MaxTransferAmount is set to Alice's balance: 1,000,000,000,001 XO, for this test.
        10 FTM was transferred to the XDAO contract to pay for management work.
        Alice is not the current owner of the contract.
        Bob is not the current owner of the contract.
        Alice and Bob are not of the same address.

        Alice is transfering Bob all her balance...

        Messages coming onchain...
        Total XO wei that were provided for liquidation:      10000001000010000000000000000
        1. XO wei that were forwarded to the pool directly:   4995058055447864278428732895
        2. XO wei that were sold for FTM at the dex:          5004942944562135721571267105
        3. FTM wei that were bought with the XOs at the dex:  49922920520708933
        4. FTM wei that were forwarded to the pool:           49922920520708933
        5. XO wei that the pool didn't accept:                2502534095915861920384923
        6. FTM wei that the pool didn't accept:               0
        7. PPM that failed to be accepted by the pool:        250

        We have an innovative implementation of token liquidation.
        Problem: When we add a sum of Utility tokens to liquidity pool
        <Utility token, Buddy token>, we first assemble a new chunk of liquidity 
        <Utility amount, Buddy amount> using the sum, before forwarding the liquidity chunk
        to the liquidity pool. A typical solution is to let the new chunk equal to
        <1st half of the sum, BuddyTokensSwappedWith(2nd half of the sum>
        The flaw is they ignore that the ratio of reserves in the pool changes by the swap.
        This leads to the Buddy side of the chunk not fully accepted to the pool.
        The remainder is significant if the chunk is significant compared to the total liquidity.
        Solution: Instead of a half-half split, We calculate the best split.
        Achievement: The remainder is reduced to a few hundredths.
        A smaller remainder is impossible due to numerical errors in integer calculation.
        The cost of calculation is justified by our quantum liquidation.

        XDAO tokens were burnt.
        31,400 XO were waiting to be burnt before this transfer.
        They should be coming form previous transfers.
        Burn fees were newly collected from this transfer and added to the waiting XO.
        314,000,031,400.314 XO were burnt.
        So, 314,000,000,000.314 XO were the newly collected burn fee.
        Burn fees are/were already checked for correctness in other test cases.
        totalSupply decrement ==
        tokens that were waiting to be burnt + tokens newly collected fee to be burnt.
        They each amount to 314,000,031,400.314 XO.
        No tokens remain waiting to be burnt.

        XDAO tokens were sold for Hertz tokens, adding to the Rewards Hertz account.
        1,000 XO were waiting to be Hertz-sold.
        They should be coming form previous transfers.
        Rewards fees were newly collected from this transfer and added to the waiting XO.
        10,000,001,000.01 XO should be soled for Hertz,
        10,000,000,000.01 XO of which is the newly collected rewards fee.
        Rewards fees are/were already checked for correctness in other test cases.
        Rewards Hertz account's balance was increased by 12,467,973,946.559 HTZ
        The amount should be correct, as we trust the Dex's swap operation.
        No XDAO tokens are still waiting to be sold for Hertz.

        XDAO tokens were liquified to the (XDAO, FTM) liquidity pool,
        in exchange for LP tokens minted to the current owner.
        1,000 XO were waiting to be liquified before this transfer.
        They should be coming form previous transfers.
        Liquidity fees were newly collected from this transfer and added to the waiting XO.
        10,000,001,000.01 XO should be liquidated,
        10,000,000,000.01 XO of which is the newly collected liquidity fee.
        Liquidity fees were check for correctness in other test cases.
        The owner's LP tokens were increased by 15,787.43 units.
        The amount should be correct, as we trust the Dex operations.
        No XDAO tokens are still waiting to be liquified.

        544227228133760 FTM wei's, or 0.001 FTM, were transferred
        from {0x0165...}, the XDAO contract, to {0x7099...}, Alice the transaction sender.
        This is the compensation for Alice having done a round of fee management task.

        MaxTransferAmount is restored to: 1,000,000,000,000 XO.
    √ A transfer triggered and did a round of management work, and got compensated. (384ms)

  9. Check auto-periodic pulses management.

        Portions of tokens used to vote or held, should be automatically burnt,
        and a portion of liquidity should be periodically converted to Rewards Hertz.
        The gas payer 'unlucky' to perform the pulses, are compensated for the extra.
    √ Test design was described.

  10. Upgrade the current contract to a new contract at the same address.

        The new upgradeable contract of Pledge token was deployed to:  {0x0165...}
        Everything that was interacting with the existing contract, is not affected.
    √ deployed the new upgradeable contract, replacing/upgrading the existing contract. (124ms)

  ======= Phase 3. The upgrading contract that inherited the initial contract is tested. =====

        Exactly the same test cases will be repeated on the new contract.
    √ 

  5. Check administrative functions for parameter control.

        SetFees function works, changing fee rates correctly, called by the owner.
        SetFees function does NOT work, when called by a non-owner user.

        SetStoreAddresses function works when called by the owner.
        SetStoreAddresses function does NOT work when called by a non-owner user.

        SetPulses function works correctly, when called by the owner.
        SetPulse function does NOT work, when called by a non-owner user.

        SetMaxTransferAmount function works correctly, when called by the owner.
        SetMaxTransferAmount function does NOT work, when called by a non-owner user.

        SetQauntums function works correctly, when called by the owner.
        SetQuantums function does NOT work, when called by a non-owner user.
    √ The administrative functions for parameter control were checked. (289ms)

        BurnFee: 31.4% of transfer amount is correctly set to be burnt.
        RewardsFee: 31.4% of transfer amount is correctly set to be converted to Hertz rewards.
        LiquidityFee: 1% of transfer amount is correctly set to be liquified paired with FTM.

        BurnFee Address: {0x8887...} is correctly set.
        RewardsFee Address: {0x0300...} is correctly set.
        LiquidityFee Address: {0x1093...} is correctly set.

        VoteBurnPulse: 0.07% of tokens used to vote is correctly set to be burnt.
        AllBurnPulse: 0.777% of all holdings is correctly set to be burnt.
        LiquidityPulse: 0.69% of LP is correctly set to be converted to Hertz rewards.

        maxTransferAmount 1,000,000,000,000 XO is correctly set.
        burnQuantum 100,000 XO is correctly set.
        rewardsQuantum 200,000 XO is correctly set.
        liquidityQuantum 300,000 XO is correctly set.

        Dex Router address {0xCf7E...} is correctly set.
        Liquidity Pool (XDAO, FTM) is found at its due address: {0x0ACa...}.
        Liquidity Pool (XDAO, HTZ) is found at its due address: {0x5CCF...}.

        autoManagement is currently set to:  true
    √ The parameters were correctlyl reverted back to their initial values. (57ms)

  6. Check owner-to-user transfers and fees collection.

        Assumption: the state variable 'totalSupply' is always the real total supply.
    √ Test design was described.
        The maximum amount that will NOT trigger the MaxTransferAmount 
        and quantized fee management, is 100,000 XO
        Only fee collections should triggered, if the owner transfers this amount to a user.
        Alice is not the current owner.
        theOwner transferred 100,000 XO to Alice.
        The total supply is preserved to be: 999,685,999,968,599.6 XO
        The sender's balance was reduced by the transfer amount: 100,000 XO.
        Owner-Any transfer is free of fees,
        hence the fee rates: { burn: 0, rewards: 0, liquidity: 0 }
        Burn fee is paid correctly. Burn fee collection was increased by: 0 XO.
        Rewards fee is paid correctly. Rewards fee collection was increased by: 0 XO.
        Liquidity fee is paid correctly. Liquidity fee collection was increased by: 0 XO.
        The amount sent - the amount received = total fees: 0
        Cash flow on owner-to-user transfer is correct and precise.
    √ An owner-to-user transfer is called. (80ms)

  7. Check user-to-user transfers and fees collection.

        Assumption: the state variable 'totalSupply' is always the real total supply.
    √ Test design was described.
        The maximum amount that will NOT trigger the MaxTransferAmount 
        and quantized fee management is 100,000 XO
        Only fee collection should triggered, if a user transfers this amount to another user.
        Testing with the siginer Alice, who is not the current owner.
        Bot is not the current owner, either.
        Alice, a non-owner, transferred 100,000 XO to Bob.
        The total supply is preserved to be: 999,685,999,968,599.6 XO
        The sender's balance was reduced by the transfer amount: 100,000 XO.
        Burn fee is paid correctly. Burn fee collection was increased by: 31,400 XO.
        Rewards fee is paid correctly. Rewards fee collection was increased by: 1,000 XO.
        Liquidity fee is paid correctly. Liquidity fee collection was increased by: 1,000 XO.
        The amount sent - the amount received = total fees: 33,400
        Cash flow on owner-to-user transfer is correct and precise.
    √ An user-to-user transfer was called and the fees were correctly collected. (100ms)

  8. Check quantized management of fees.

        Tokens collected in the 'storeAddresses.rewards' should be spent
        on a quantum basis (to buy Hertz for Rewards),
        to avoid frequent small transfers and to save gas fees.
        You can't spend 23000 gas to buy 5 weies of Hertz.
    √ Test design was described.
        The minimum amount that WILL trigger 
        all the quantized management sub-functions, is 1,000,000,000,001 XO.
        All quantized management sub-functions should triggered, 
        if a user transfers this amount to another user.
        Alice's balance was supplemented to be 1,000,000,000,001 XO, 
        to trigger the quantized fees management.
        MaxTransferAmount is set to Alice's balance: 1,000,000,000,001 XO, for this test.
        10 FTM was transferred to the XDAO contract to pay for management work.
        Alice is not the current owner of the contract.
        Bob is not the current owner of the contract.
        Alice and Bob are not of the same address.

        Alice is transfering Bob all her balance...

        Messages coming onchain...
        Total XO wei that were provided for liquidation:      10000001000010000000000000000
        1. XO wei that were forwarded to the pool directly:   4995058052320833838536783954
        2. XO wei that were sold for FTM at the dex:          5004942947689166161463216046
        3. FTM wei that were bought with the XOs at the dex:  49920425217315702
        4. FTM wei that were forwarded to the pool:           49920425217315702
        5. XO wei that the pool didn't accept:                2502534094349172018025224
        6. FTM wei that the pool didn't accept:               0
        7. PPM that failed to be accepted by the pool:        250

        We have an innovative implementation of token liquidation.
        Problem: When we add a sum of Utility tokens to liquidity pool
        <Utility token, Buddy token>, we first assemble a new chunk of liquidity 
        <Utility amount, Buddy amount> using the sum, before forwarding the liquidity chunk
        to the liquidity pool. A typical solution is to let the new chunk equal to
        <1st half of the sum, BuddyTokensSwappedWith(2nd half of the sum>
        The flaw is they ignore that the ratio of reserves in the pool changes by the swap.
        This leads to the Buddy side of the chunk not fully accepted to the pool.
        The remainder is significant if the chunk is significant compared to the total liquidity.
        Solution: Instead of a half-half split, We calculate the best split.
        Achievement: The remainder is reduced to a few hundredths.
        A smaller remainder is impossible due to numerical errors in integer calculation.
        The cost of calculation is justified by our quantum liquidation.

        XDAO tokens were burnt.
        31,400 XO were waiting to be burnt before this transfer.
        They should be coming form previous transfers.
        Burn fees were newly collected from this transfer and added to the waiting XO.
        314,000,031,400.314 XO were burnt.
        So, 314,000,000,000.314 XO were the newly collected burn fee.
        Burn fees are/were already checked for correctness in other test cases.
        totalSupply decrement ==
        tokens that were waiting to be burnt + tokens newly collected fee to be burnt.
        They each amount to 314,000,031,400.314 XO.
        No tokens remain waiting to be burnt.

        XDAO tokens were sold for Hertz tokens, adding to the Rewards Hertz account.
        1,000 XO were waiting to be Hertz-sold.
        They should be coming form previous transfers.
        Rewards fees were newly collected from this transfer and added to the waiting XO.
        10,000,001,000.01 XO should be soled for Hertz,
        10,000,000,000.01 XO of which is the newly collected rewards fee.
        Rewards fees are/were already checked for correctness in other test cases.
        Rewards Hertz account's balance was increased by 12,466,417,592.082 HTZ
        The amount should be correct, as we trust the Dex's swap operation.
        No XDAO tokens are still waiting to be sold for Hertz.

        XDAO tokens were liquified to the (XDAO, FTM) liquidity pool,
        in exchange for LP tokens minted to the current owner.
        1,000 XO were waiting to be liquified before this transfer.
        They should be coming form previous transfers.
        Liquidity fees were newly collected from this transfer and added to the waiting XO.
        10,000,001,000.01 XO should be liquidated,
        10,000,000,000.01 XO of which is the newly collected liquidity fee.
        Liquidity fees were check for correctness in other test cases.
        The owner's LP tokens were increased by 15,787.035 units.
        The amount should be correct, as we trust the Dex operations.
        No XDAO tokens are still waiting to be liquified.

        360180791082176 FTM wei's, or 0 FTM, were transferred
        from {0x0165...}, the XDAO contract, to {0x7099...}, Alice the transaction sender.
        This is the compensation for Alice having done a round of fee management task.

        MaxTransferAmount is restored to: 1,000,000,000,000 XO.
    √ A transfer triggered and did a round of management work, and got compensated. (431ms)

  9. Check auto-periodic pulses management.

        Portions of tokens used to vote or held, should be automatically burnt,
        and a portion of liquidity should be periodically converted to Rewards Hertz.
        The gas payer 'unlucky' to perform the pulses, are compensated for the extra.
    √ Test design was described.